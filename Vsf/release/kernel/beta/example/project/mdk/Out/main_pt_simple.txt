; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave --gnu -o.\out\main_pt_simple.o --asm_dir=.\Out\ --list_dir=.\Out\ --depend=.\out\main_pt_simple.d --cpu=Cortex-M3 --apcs=interwork -O3 --diag_suppress=9931,64,1,381,177 -I..\..\..\vsf -I..\..\usrapp\template -I..\..\..\vsf\utilities\compiler\arm\CMSIS\Core\Include -I..\..\usrapp\template\app_cfg -I.\RTE\Device\CMSDK_CM3 -I.\RTE\_tempalte_armv7-m_ac5 -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\5.5.1\CMSIS\Core\Include -IC:\Keil_v5\ARM\PACK\Keil\V2M-MPS2_CMx_BSP\1.7.0\Boards\ARM\V2M-MPS2\Common -IC:\Keil_v5\ARM\PACK\Keil\V2M-MPS2_CMx_BSP\1.7.0\Device\CMSDK_CM3\Include -D__MICROLIB -D__UVISION_VERSION=527 -D_RTE_ -DCMSDK_CM3 --enum_is_int --wchar32 --omf_browse=.\out\main_pt_simple.crf ..\..\usrapp\template\main_pt_simple.c]
                          THUMB

                          AREA ||i.main||, CODE, READONLY, ALIGN=1

                  main PROC
;;;148    #if VSF_PROJ_CFG_USE_CUBE != ENABLED
;;;149    int main(void)
000000  b510              PUSH     {r4,lr}
;;;150    {
;;;151        vsf_stdio_init();
000002  f7fffffe          BL       vsf_stdio_init
;;;152        
;;;153        vsf_kernel_pt_simple_demo();
000006  f7fffffe          BL       vsf_kernel_pt_simple_demo
;;;154        
;;;155    #if VSF_OS_RUN_MAIN_AS_THREAD == ENABLED
;;;156        while(1) {
;;;157            printf("hello world! \r\n");
;;;158            vsf_delay_ms(1000);
;;;159        }
;;;160    #endif
;;;161        return 0;
00000a  2000              MOVS     r0,#0
;;;162    }
00000c  bd10              POP      {r4,pc}
;;;163    
                          ENDP


                          AREA ||i.vsf_kernel_pt_simple_demo||, CODE, READONLY, ALIGN=2

                  vsf_kernel_pt_simple_demo PROC
;;;109    
;;;110    void vsf_kernel_pt_simple_demo(void)
000000  b57f              PUSH     {r0-r6,lr}
;;;111    {
;;;112        static_task_instance(
;;;113            features_used(
;;;114                mem_sharable( )
;;;115                mem_nonsharable( )
;;;116            )
;;;117        )
;;;118        
;;;119        //! initialise semaphore
;;;120        vsf_sem_init(&user_sem, 0); 
000002  f64772ff          MOV      r2,#0x7fff
000006  2100              MOVS     r1,#0
000008  480f              LDR      r0,|L2.72|
00000a  f7fffffe          BL       vsf_eda_sync_init
;;;121        
;;;122        //! start a user task
;;;123        {
;;;124            static NO_INIT user_pt_task_t __user_task;
;;;125            __user_task.param.psem = &user_sem;
00000e  4e0e              LDR      r6,|L2.72|
;;;126            init_vsf_pt(user_pt_task_t, &__user_task, vsf_priority_inherit);
000010  4d0e              LDR      r5,|L2.76|
000012  f1a600b8          SUB      r0,r6,#0xb8           ;125
000016  64c6              STR      r6,[r0,#0x4c]  ; __user_task
000018  e895001e          LDM      r5,{r1-r4}
00001c  e88d001e          STM      sp,{r1-r4}
000020  2400              MOVS     r4,#0
000022  f8804048          STRB     r4,[r0,#0x48]
000026  4669              MOV      r1,sp
000028  f7fffffe          BL       vsf_task_start
;;;127        };
;;;128    
;;;129    #if VSF_OS_RUN_MAIN_AS_THREAD == ENABLED
;;;130        while(1) {
;;;131            printf("hello world! \r\n");
;;;132            vsf_delay_ms(10000);
;;;133            vsf_sem_post(&user_sem);            //!< post a semaphore
;;;134        }
;;;135    #else
;;;136        //! in this case, we only use main to initialise vsf_tasks
;;;137    
;;;138        //! start a user task b
;;;139        {
;;;140            static NO_INIT user_pt_task_b_t __user_pt_task_b;
;;;141            __user_pt_task_b.param.psem = &user_sem;
00002c  f1a60058          SUB      r0,r6,#0x58
000030  3510              ADDS     r5,r5,#0x10
000032  e9c04613          STRD     r4,r6,[r0,#0x4c]
000036  cd2e              LDM      r5,{r1-r3,r5}
000038  e88d002e          STM      sp,{r1-r3,r5}
;;;142            __user_pt_task_b.param.cnt = 0;
;;;143            init_vsf_task(user_pt_task_b_t, &__user_pt_task_b, vsf_priority_0);
00003c  f8804048          STRB     r4,[r0,#0x48]
000040  4669              MOV      r1,sp
000042  f7fffffe          BL       vsf_task_start
;;;144        }
;;;145    #endif
;;;146    }
000046  bd7f              POP      {r0-r6,pc}
;;;147    
                          ENDP

                  |L2.72|
                          DCD      ||.bss.noinit||+0xb8
                  |L2.76|
                          DCD      ||.constdata||

                          AREA ||i.vsf_task_func_user_pt_sub_task_t||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_pre_padding
                          REQUIRE _printf_percent
                          REQUIRE _printf_flags
                          REQUIRE _printf_widthprec
                          REQUIRE _printf_x
                          REQUIRE _printf_longlong_hex
                  vsf_task_func_user_pt_sub_task_t PROC
;;;55     
;;;56     private implement_vsf_pt(user_pt_sub_task_t) 
000000  b510              PUSH     {r4,lr}
;;;57     {
;;;58         vsf_pt_begin();
000002  7801              LDRB     r1,[r0,#0]
000004  b929              CBNZ     r1,|L3.18|
;;;59        
;;;60         printf("receive semaphore...[%08x]\r\n", this.cnt++);
000006  6841              LDR      r1,[r0,#4]
000008  1c4a              ADDS     r2,r1,#1
00000a  6042              STR      r2,[r0,#4]
00000c  a002              ADR      r0,|L3.24|
00000e  f7fffffe          BL       __2printf
                  |L3.18|
;;;61          
;;;62         vsf_pt_end();
000012  2000              MOVS     r0,#0
;;;63     }
000014  bd10              POP      {r4,pc}
;;;64     
                          ENDP

000016  0000              DCW      0x0000
                  |L3.24|
000018  72656365          DCB      "receive semaphore...[%08x]\r\n",0
00001c  69766520
000020  73656d61
000024  70686f72
000028  652e2e2e
00002c  5b253038
000030  785d0d0a
000034  00      
000035  00                DCB      0
000036  00                DCB      0
000037  00                DCB      0

                          AREA ||i.vsf_task_func_user_pt_task_b_t||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_pre_padding
                          REQUIRE _printf_percent
                          REQUIRE _printf_flags
                          REQUIRE _printf_widthprec
                          REQUIRE _printf_x
                          REQUIRE _printf_longlong_hex
                  vsf_task_func_user_pt_task_b_t PROC
;;;91     #if VSF_OS_RUN_MAIN_AS_THREAD != ENABLED
;;;92     private implement_vsf_pt(user_pt_task_b_t) 
000000  b510              PUSH     {r4,lr}
;;;93     {
000002  4604              MOV      r4,r0
;;;94         vsf_pt_begin();
000004  7800              LDRB     r0,[r0,#0]
000006  b118              CBZ      r0,|L4.16|
000008  2801              CMP      r0,#1
00000a  d009              BEQ      |L4.32|
;;;95         
;;;96         while(1) {
;;;97             printf("post semaphore...   [%08x]\r\n", this.cnt++);
;;;98             
;;;99             vsf_pt_wait_until(
;;;100                vsf_delay_ms(10000){               //!< wait 10s
;;;101                    vsf_sem_post(this.psem);    //!< post a semaphore
;;;102                }
;;;103            );
;;;104        }
;;;105        
;;;106        vsf_pt_end();
00000c  2000              MOVS     r0,#0
;;;107    }
00000e  bd10              POP      {r4,pc}
                  |L4.16|
000010  6861              LDR      r1,[r4,#4]            ;97
000012  1c48              ADDS     r0,r1,#1              ;97
000014  6060              STR      r0,[r4,#4]            ;97
000016  a00a              ADR      r0,|L4.64|
000018  f7fffffe          BL       __2printf
00001c  2001              MOVS     r0,#1                 ;99
00001e  7020              STRB     r0,[r4,#0]            ;99
                  |L4.32|
000020  f2427010          MOV      r0,#0x2710            ;99
000024  f7fffffe          BL       vsf_systimer_ms_to_tick
000028  f7fffffe          BL       __vsf_delay
00002c  f5a07180          SUB      r1,r0,#0x100          ;99
000030  3905              SUBS     r1,#5                 ;99
000032  d001              BEQ      |L4.56|
000034  2002              MOVS     r0,#2                 ;99
000036  bd10              POP      {r4,pc}
                  |L4.56|
000038  68a0              LDR      r0,[r4,#8]            ;99
00003a  f7fffffe          BL       vsf_eda_sync_increase
00003e  e7e7              B        |L4.16|
;;;108    #endif
                          ENDP

                  |L4.64|
000040  706f7374          DCB      "post semaphore...   [%08x]\r\n",0
000044  2073656d
000048  6170686f
00004c  72652e2e
000050  2e202020
000054  5b253038
000058  785d0d0a
00005c  00      
00005d  00                DCB      0
00005e  00                DCB      0
00005f  00                DCB      0

                          AREA ||i.vsf_task_func_user_pt_task_t||, CODE, READONLY, ALIGN=2

                  vsf_task_func_user_pt_task_t PROC
;;;67     
;;;68     private implement_vsf_pt(user_pt_task_t) 
000000  b570              PUSH     {r4-r6,lr}
;;;69     {
000002  4604              MOV      r4,r0
;;;70         vsf_pt_begin();
000004  7800              LDRB     r0,[r0,#0]
000006  2500              MOVS     r5,#0
000008  b128              CBZ      r0,|L5.22|
00000a  2801              CMP      r0,#1
00000c  d006              BEQ      |L5.28|
00000e  2802              CMP      r0,#2
000010  d012              BEQ      |L5.56|
;;;71     
;;;72         this.cnt = 0;
;;;73         while(1) {
;;;74             vsf_pt_wait_until(
;;;75                     vsf_sem_pend(this.psem);                                        //!< wait for semaphore forever
;;;76                 );
;;;77                 
;;;78             this.print_task.cnt = this.cnt;                                         //!< Pass parameter
;;;79             vsf_pt_call(user_pt_sub_task_t, &this.print_task) {
;;;80                     //! pt call complete
;;;81                     this.cnt = this.print_task.cnt;                                 //!< read parameter
;;;82                 }
;;;83                 vsf_pt_on_call_return(fsm_rt_err) {
;;;84                     printf("error detected\r\n");
;;;85                 }
;;;86         }
;;;87     
;;;88         vsf_pt_end();
000012  2000              MOVS     r0,#0
;;;89     }
000014  bd70              POP      {r4-r6,pc}
                  |L5.22|
000016  60a5              STR      r5,[r4,#8]            ;72
                  |L5.24|
000018  2001              MOVS     r0,#1                 ;74
00001a  7020              STRB     r0,[r4,#0]            ;74
                  |L5.28|
00001c  f04f31ff          MOV      r1,#0xffffffff        ;74
000020  6860              LDR      r0,[r4,#4]            ;74
000022  f7fffffe          BL       __vsf_sem_pend
000026  2803              CMP      r0,#3                 ;74
000028  d001              BEQ      |L5.46|
00002a  2002              MOVS     r0,#2                 ;74
                  |L5.44|
00002c  bd70              POP      {r4-r6,pc}
                  |L5.46|
00002e  68a0              LDR      r0,[r4,#8]            ;78
000030  6120              STR      r0,[r4,#0x10]         ;79
000032  7325              STRB     r5,[r4,#0xc]          ;79
000034  2002              MOVS     r0,#2                 ;79
000036  7020              STRB     r0,[r4,#0]            ;79
                  |L5.56|
000038  2201              MOVS     r2,#1                 ;79
00003a  f104010c          ADD      r1,r4,#0xc            ;79
00003e  4807              LDR      r0,|L5.92|
000040  f7fffffe          BL       vsf_task_branch
000044  2801              CMP      r0,#1                 ;79
000046  d0f1              BEQ      |L5.44|
000048  b128              CBZ      r0,|L5.86|
00004a  1c40              ADDS     r0,r0,#1              ;79
00004c  d1e4              BNE      |L5.24|
00004e  a004              ADR      r0,|L5.96|
000050  f7fffffe          BL       __2printf
000054  e7e0              B        |L5.24|
                  |L5.86|
000056  6920              LDR      r0,[r4,#0x10]         ;81
000058  60a0              STR      r0,[r4,#8]            ;81
00005a  e7dd              B        |L5.24|
;;;90     
                          ENDP

                  |L5.92|
                          DCD      vsf_task_func_user_pt_sub_task_t
                  |L5.96|
000060  6572726f          DCB      "error detected\r\n",0
000064  72206465
000068  74656374
00006c  65640d0a
000070  00      
000071  00                DCB      0
000072  00                DCB      0
000073  00                DCB      0

                          AREA ||.bss.noinit||, DATA, NOINIT, ALIGN=3

                  __user_task
                          %        96
                  __user_pt_task_b
                          %        88
                  user_sem
                          %        12

                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

                          DCD      vsf_task_func_user_pt_task_t
                          DCD      0xffffffff
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      vsf_task_func_user_pt_task_b_t
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000

;*** Start embedded assembler ***

#line 1 "..\\..\\usrapp\\template\\main_pt_simple.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___16_main_pt_simple_c_bfbe44b1____REV16|
#line 468 "..\\..\\..\\vsf\\utilities\\compiler\\arm\\CMSIS\\Core\\Include\\cmsis_armcc.h"
|__asm___16_main_pt_simple_c_bfbe44b1____REV16| PROC
#line 469

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___16_main_pt_simple_c_bfbe44b1____REVSH|
#line 483
|__asm___16_main_pt_simple_c_bfbe44b1____REVSH| PROC
#line 484

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___16_main_pt_simple_c_bfbe44b1____RRX|
#line 670
|__asm___16_main_pt_simple_c_bfbe44b1____RRX| PROC
#line 671

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***

                  __ARM_use_no_argv EQU 0
